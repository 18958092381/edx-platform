// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PeerGrading = (function() {

    function PeerGrading(element) {
      this.activate_problem = __bind(this.activate_problem, this);

      this.show_results = __bind(this.show_results, this);

      this.construct_progress_bar = __bind(this.construct_progress_bar, this);
      this.peer_grading_container = $('.peer-grading');
      this.use_single_location = this.peer_grading_container.data('use-single-location');
      this.peer_grading_outer_container = $('.peer-grading-container');
      this.ajax_url = this.peer_grading_container.data('ajax-url');
      this.error_container = $('.error-container');
      this.error_container.toggle(!this.error_container.is(':empty'));
      this.message_container = $('.message-container');
      this.message_container.toggle(!this.message_container.is(':empty'));
      this.problem_button = $('.problem-button');
      this.problem_button.click(this.show_results);
      this.problem_list = $('.problem-list');
      this.construct_progress_bar();
      if (this.use_single_location) {
        this.activate_problem();
      }
    }

    PeerGrading.prototype.construct_progress_bar = function() {
      var problems,
        _this = this;
      problems = this.problem_list.find('tr').next();
      return problems.each(function(index, element) {
        var bar_max, bar_value, problem, progress_bar;
        problem = $(element);
        progress_bar = problem.find('.progress-bar');
        bar_value = parseInt(problem.data('graded'));
        bar_max = parseInt(problem.data('required')) + bar_value;
        return progress_bar.progressbar({
          value: bar_value,
          max: bar_max
        });
      });
    };

    PeerGrading.prototype.show_results = function(event) {
      var data, location_to_fetch,
        _this = this;
      location_to_fetch = $(event.target).data('location');
      data = {
        'location': location_to_fetch
      };
      return $.postWithPrefix("" + this.ajax_url + "problem", data, function(response) {
        var backend;
        if (response.success) {
          _this.peer_grading_outer_container.after(response.html).remove();
          backend = new PeerGradingProblemBackend(_this.ajax_url, false);
          return new PeerGradingProblem(backend);
        } else {
          return _this.gentle_alert(response.error);
        }
      });
    };

    PeerGrading.prototype.activate_problem = function() {
      var backend;
      backend = new PeerGradingProblemBackend(this.ajax_url, false);
      return new PeerGradingProblem(backend);
    };

    return PeerGrading;

  })();

}).call(this);
