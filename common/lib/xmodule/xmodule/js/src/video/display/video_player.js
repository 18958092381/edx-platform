// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.VideoPlayer = (function(_super) {

    __extends(VideoPlayer, _super);

    function VideoPlayer() {
      this.pause = __bind(this.pause, this);

      this.play = __bind(this.play, this);

      this.toggleFullScreen = __bind(this.toggleFullScreen, this);

      this.update = __bind(this.update, this);

      this.onVolumeChange = __bind(this.onVolumeChange, this);

      this.onSpeedChange = __bind(this.onSpeedChange, this);

      this.onSeek = __bind(this.onSeek, this);

      this.onEnded = __bind(this.onEnded, this);

      this.onPause = __bind(this.onPause, this);

      this.onPlay = __bind(this.onPlay, this);

      this.onUnstarted = __bind(this.onUnstarted, this);

      this.handlePlaybackQualityChange = __bind(this.handlePlaybackQualityChange, this);

      this.onPlaybackQualityChange = __bind(this.onPlaybackQualityChange, this);

      this.onStateChange = __bind(this.onStateChange, this);

      this.onReady = __bind(this.onReady, this);

      this.bindExitFullScreen = __bind(this.bindExitFullScreen, this);
      return VideoPlayer.__super__.constructor.apply(this, arguments);
    }

    VideoPlayer.prototype.initialize = function() {
      YT.PlayerState.UNSTARTED = -1;
      this.currentTime = 0;
      return this.el = $("#video_" + this.video.id);
    };

    VideoPlayer.prototype.bind = function() {
      $(this.control).bind('play', this.play).bind('pause', this.pause);
      $(this.qualityControl).bind('changeQuality', this.handlePlaybackQualityChange);
      $(this.caption).bind('seek', this.onSeek);
      $(this.speedControl).bind('speedChange', this.onSpeedChange);
      $(this.progressSlider).bind('seek', this.onSeek);
      if (this.volumeControl) {
        $(this.volumeControl).bind('volumeChange', this.onVolumeChange);
      }
      $(document).keyup(this.bindExitFullScreen);
      this.$('.add-fullscreen').click(this.toggleFullScreen);
      if (!onTouchBasedDevice()) {
        return this.addToolTip();
      }
    };

    VideoPlayer.prototype.bindExitFullScreen = function(event) {
      if (this.el.hasClass('fullscreen') && event.keyCode === 27) {
        return this.toggleFullScreen(event);
      }
    };

    VideoPlayer.prototype.render = function() {
      this.control = new VideoControl({
        el: this.$('.video-controls')
      });
      this.qualityControl = new VideoQualityControl({
        el: this.$('.secondary-controls')
      });
      this.caption = new VideoCaption({
        el: this.el,
        youtubeId: this.video.youtubeId('1.0'),
        currentSpeed: this.currentSpeed(),
        captionAssetPath: this.video.caption_asset_path
      });
      if (!onTouchBasedDevice()) {
        this.volumeControl = new VideoVolumeControl({
          el: this.$('.secondary-controls')
        });
      }
      this.speedControl = new VideoSpeedControl({
        el: this.$('.secondary-controls'),
        speeds: this.video.speeds,
        currentSpeed: this.currentSpeed()
      });
      this.progressSlider = new VideoProgressSlider({
        el: this.$('.slider')
      });
      this.playerVars = {
        controls: 0,
        wmode: 'transparent',
        rel: 0,
        showinfo: 0,
        enablejsapi: 1,
        modestbranding: 1
      };
      if (this.video.start) {
        this.playerVars.start = this.video.start;
        this.playerVars.wmode = 'window';
      }
      if (this.video.end) {
        this.playerVars.end = this.video.end;
      }
      this.player = new YT.Player(this.video.id, {
        playerVars: this.playerVars,
        videoId: this.video.youtubeId(),
        events: {
          onReady: this.onReady,
          onStateChange: this.onStateChange,
          onPlaybackQualityChange: this.onPlaybackQualityChange
        }
      });
      return this.caption.hideCaptions(this['video'].hide_captions);
    };

    VideoPlayer.prototype.addToolTip = function() {
      return this.$('.add-fullscreen, .hide-subtitles').qtip({
        position: {
          my: 'top right',
          at: 'top center'
        }
      });
    };

    VideoPlayer.prototype.onReady = function(event) {
      if (!onTouchBasedDevice()) {
        return $('.video-load-complete:first').data('video').player.play();
      }
    };

    VideoPlayer.prototype.onStateChange = function(event) {
      switch (event.data) {
        case YT.PlayerState.UNSTARTED:
          return this.onUnstarted();
        case YT.PlayerState.PLAYING:
          return this.onPlay();
        case YT.PlayerState.PAUSED:
          return this.onPause();
        case YT.PlayerState.ENDED:
          return this.onEnded();
      }
    };

    VideoPlayer.prototype.onPlaybackQualityChange = function(event, value) {
      var quality;
      quality = this.player.getPlaybackQuality();
      return this.qualityControl.onQualityChange(quality);
    };

    VideoPlayer.prototype.handlePlaybackQualityChange = function(event, value) {
      return this.player.setPlaybackQuality(value);
    };

    VideoPlayer.prototype.onUnstarted = function() {
      this.control.pause();
      return this.caption.pause();
    };

    VideoPlayer.prototype.onPlay = function() {
      this.video.log('play_video');
      if (window.player && window.player !== this.player) {
        window.player.pauseVideo();
      }
      window.player = this.player;
      if (!this.player.interval) {
        this.player.interval = setInterval(this.update, 200);
      }
      this.caption.play();
      this.control.play();
      return this.progressSlider.play();
    };

    VideoPlayer.prototype.onPause = function() {
      this.video.log('pause_video');
      if (window.player === this.player) {
        window.player = null;
      }
      clearInterval(this.player.interval);
      this.player.interval = null;
      this.caption.pause();
      return this.control.pause();
    };

    VideoPlayer.prototype.onEnded = function() {
      this.control.pause();
      return this.caption.pause();
    };

    VideoPlayer.prototype.onSeek = function(event, time) {
      this.player.seekTo(time, true);
      if (this.isPlaying()) {
        clearInterval(this.player.interval);
        this.player.interval = setInterval(this.update, 200);
      } else {
        this.currentTime = time;
      }
      return this.updatePlayTime(time);
    };

    VideoPlayer.prototype.onSpeedChange = function(event, newSpeed) {
      this.currentTime = Time.convert(this.currentTime, parseFloat(this.currentSpeed()), newSpeed);
      newSpeed = parseFloat(newSpeed).toFixed(2).replace(/\.00$/, '.0');
      this.video.setSpeed(newSpeed);
      this.caption.currentSpeed = newSpeed;
      if (this.isPlaying()) {
        this.player.loadVideoById(this.video.youtubeId(), this.currentTime);
      } else {
        this.player.cueVideoById(this.video.youtubeId(), this.currentTime);
      }
      return this.updatePlayTime(this.currentTime);
    };

    VideoPlayer.prototype.onVolumeChange = function(event, volume) {
      return this.player.setVolume(volume);
    };

    VideoPlayer.prototype.update = function() {
      if (this.currentTime = this.player.getCurrentTime()) {
        return this.updatePlayTime(this.currentTime);
      }
    };

    VideoPlayer.prototype.updatePlayTime = function(time) {
      var progress;
      progress = Time.format(time) + ' / ' + Time.format(this.duration());
      this.$(".vidtime").html(progress);
      this.caption.updatePlayTime(time);
      return this.progressSlider.updatePlayTime(time, this.duration());
    };

    VideoPlayer.prototype.toggleFullScreen = function(event) {
      event.preventDefault();
      if (this.el.hasClass('fullscreen')) {
        this.$('.add-fullscreen').attr('title', 'Fill browser');
        this.el.removeClass('fullscreen');
      } else {
        this.el.addClass('fullscreen');
        this.$('.add-fullscreen').attr('title', 'Exit fill browser');
      }
      return this.caption.resize();
    };

    VideoPlayer.prototype.play = function() {
      if (this.player.playVideo) {
        return this.player.playVideo();
      }
    };

    VideoPlayer.prototype.isPlaying = function() {
      return this.player.getPlayerState() === YT.PlayerState.PLAYING;
    };

    VideoPlayer.prototype.pause = function() {
      if (this.player.pauseVideo) {
        return this.player.pauseVideo();
      }
    };

    VideoPlayer.prototype.duration = function() {
      return this.video.getDuration();
    };

    VideoPlayer.prototype.currentSpeed = function() {
      return this.video.speed;
    };

    VideoPlayer.prototype.volume = function(value) {
      if (value != null) {
        return this.player.setVolume(value);
      } else {
        return this.player.getVolume();
      }
    };

    return VideoPlayer;

  })(Subview);

}).call(this);
