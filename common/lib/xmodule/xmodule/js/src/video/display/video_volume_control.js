// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.VideoVolumeControl = (function(_super) {

    __extends(VideoVolumeControl, _super);

    function VideoVolumeControl() {
      this.toggleMute = __bind(this.toggleMute, this);

      this.onChange = __bind(this.onChange, this);
      return VideoVolumeControl.__super__.constructor.apply(this, arguments);
    }

    VideoVolumeControl.prototype.initialize = function() {
      return this.currentVolume = 100;
    };

    VideoVolumeControl.prototype.bind = function() {
      this.$('.volume').mouseenter(function() {
        return $(this).addClass('open');
      });
      this.$('.volume').mouseleave(function() {
        return $(this).removeClass('open');
      });
      return this.$('.volume>a').click(this.toggleMute);
    };

    VideoVolumeControl.prototype.render = function() {
      this.el.prepend("<div class=\"volume\">\n  <a href=\"#\"></a>\n  <div class=\"volume-slider-container\">\n    <div class=\"volume-slider\"></div>\n  </div>\n</div>");
      return this.slider = this.$('.volume-slider').slider({
        orientation: "vertical",
        range: "min",
        min: 0,
        max: 100,
        value: 100,
        change: this.onChange,
        slide: this.onChange
      });
    };

    VideoVolumeControl.prototype.onChange = function(event, ui) {
      this.currentVolume = ui.value;
      $(this).trigger('volumeChange', this.currentVolume);
      return this.$('.volume').toggleClass('muted', this.currentVolume === 0);
    };

    VideoVolumeControl.prototype.toggleMute = function() {
      if (this.currentVolume > 0) {
        this.previousVolume = this.currentVolume;
        return this.slider.slider('option', 'value', 0);
      } else {
        return this.slider.slider('option', 'value', this.previousVolume);
      }
    };

    return VideoVolumeControl;

  })(Subview);

}).call(this);
